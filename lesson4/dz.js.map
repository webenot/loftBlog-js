{"version":3,"sources":["dz.jsx"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,IAAI,SAAS,QAAQ,UAAR,CAAb;AACA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;AAEA,IAAI,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAZ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,GAAR,CAAY,OAAO,KAAP,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAZ;AACA,QAAQ,GAAR,CAAY,KAAZ;AACA;;;;AAIA;;;;;;;AAOA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;AAWA,IAAI,OAAO;AACV,QAAO,QADG;AAEV,QAAO,QAFG;AAGV,QAAO,QAHG;AAIV,QAAO;AACN,YAAU,YADJ;AAEN,YAAU;AACT,gBAAa,gBADJ;AAET,gBAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAC,OAAO,CAAR,EAAW,MAAM,CAAjB,EAAP,EAA4B,CAA5B,EAA+B,CAA/B;AAFJ;AAFJ,EAJG;AAWV,QAAO,IAXG;AAYV,QAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAZG,CAAX;;AAeA,IAAI,OAAO;AACV,QAAO,IADG;AAEV,QAAO,QAFG;AAGV,QAAO,QAHG;AAIV,QAAO,QAJG;AAKV,QAAO,IAAI,IAAJ,CAAS,YAAT,CALG;AAMV,QAAO;AACN,YAAU;AACT,gBAAa,gBADJ;AAET,gBAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAC,OAAO,CAAR,EAAW,MAAM,CAAjB,EAAP,EAA4B,CAA5B,EAA+B,CAA/B;AAFJ,GADJ;AAKN,YAAU;AALJ;AANG,CAAX;;AAeA,IAAI,OAAO,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAX;AAAA,IAAsB,OAAO,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA7B;;AAEA,QAAQ,IAAR;AACA,QAAQ,GAAR,CAAY,UAAU,IAAV,EAAgB,IAAhB,CAAZ;AACA,QAAQ,GAAR,CAAY,UAAU,IAAV,EAAgB,IAAhB,CAAZ;AACA,QAAQ,GAAR,CAAY,oBAAY,IAAZ,EAAkB,MAA9B;AACA;AACA,QAAQ,OAAR","file":"dz.js","sourcesContent":["//let forEach = require('./forEach');\r\n//let filter = require('./filter');\r\n//let map = require('./map');\r\n//let slice = require('./slice');\r\n//let reduce = require('./reduce');\r\nlet splice = require('./splice');\r\nlet deepEqual = require('./deepEqual');\r\n\r\nlet array = [1, 2, 3, 4, 5, 6];\r\n//forEach(array, item => console.log(item));\r\n\r\n//let greaterThan4 = filter(array, item => item > 4);\r\n//console.log(greaterThan4);\r\n\r\n//let sqare = map(array, item => item*item);\r\n//console.log(sqare);\r\n\r\n//console.log(slice(array, 3, 5));\r\nconsole.log(splice(array, 3, 2, 1, 1, 1));\r\nconsole.log(array);\r\n/*console.log(reduce(array, function(a, b) {\r\n\treturn a + b;\r\n}, 0));*/\r\n\r\n/*\r\nvar flattened = reduce([[0, 1], [2, 3], [4, 5]],function(a, b) {\r\n\treturn a.concat(b);\r\n}, []);\r\n\r\nconsole.log(flattened);*/\r\n\r\n/*\r\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\r\n\r\nvar countedNames = reduce(names, function(allNames, name) {\r\n\tif (name in allNames) {\r\n\t\tallNames[name]++;\r\n\t}\r\n\telse {\r\n\t\tallNames[name] = 1;\r\n\t}\r\n\treturn allNames;\r\n}, {});\r\n\r\nconsole.log(countedNames);*/\r\n\r\n/*var friends = [\r\n\t{ name: \"Anna\", books: [\"Bible\", \"Harry Potter\"], age: 21 },\r\n\t{ name: \"Bob\", books: [\"War and peace\", \"Romeo and Juliet\"], age: 26 },\r\n\t{ name: \"Alice\", books: [\"The Lord of the Rings\", \"The Shining\"], age: 18 }\r\n];\r\n\r\n// allbooks - list which will contain all friends books +\r\n// additional list contained in initialValue\r\nvar allbooks = reduce(friends,function(prev, curr) {\r\n\treturn [...prev, ...curr.books];\r\n}, [\"Alphabet\"]);\r\n\r\nconsole.log(allbooks);*/\r\n\r\n/*var maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\r\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\r\n\r\n// reduce() without initialValue\r\nconsole.log(reduce([ { x: 22 }, { x: 42 } ], maxCallback )); // 42\r\nconsole.log(reduce([ { x: 22 }            ], maxCallback )); // { x: 22 }\r\nconsole.log(reduce( [                      ], maxCallback )); // TypeError\r\n\r\n// map/reduce; better solution, also works for empty arrays\r\nconsole.log(reduce([ { x: 22 }, { x: 42 } ].map( el => el.x ), maxCallback2, -Infinity ));*/\r\n\r\nlet objA = {\r\n\tprop1: 'value1',\r\n\tprop2: 'value2',\r\n\tprop3: 'value3',\r\n\tprop4: {\r\n\t\tsubProp1: 'sub value1',\r\n\t\tsubProp2: {\r\n\t\t\tsubSubProp1: 'sub sub value1',\r\n\t\t\tsubSubProp2: [1, 2, {prop2: 1, prop: 2}, 4, 5]\r\n\t\t}\r\n\t},\r\n\tprop5: 1000,\r\n\tprop6: new Date(2016, 2, 10)\r\n};\r\n\r\nlet objB = {\r\n\tprop5: 1000,\r\n\tprop3: 'value3',\r\n\tprop1: 'value1',\r\n\tprop2: 'value2',\r\n\tprop6: new Date('2016/03/10'),\r\n\tprop4: {\r\n\t\tsubProp2: {\r\n\t\t\tsubSubProp1: 'sub sub value1',\r\n\t\t\tsubSubProp2: [1, 2, {prop2: 1, prop: 2}, 4, 5]\r\n\t\t},\r\n\t\tsubProp1: 'sub value1'\r\n\t}\r\n};\r\n\r\nlet arr1 = [1,2,3,4], arr2 = [2,1,3,4];\r\n\r\nconsole.time();\r\nconsole.log(deepEqual(objA, objB));\r\nconsole.log(deepEqual(arr1, arr2));\r\nconsole.log(Object.keys(arr1).length);\r\n//console.log(typeof a);\r\nconsole.timeEnd();"]}