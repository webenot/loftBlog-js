{"version":3,"sources":["index.es6"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;AAIA;;;;;;AAMA;;;;;AAKA;;;;AAIA;;AAEA;;;;;AAKA;;;;;;;AAOA;AACA;;;;AAIA;;;;;;;AAOA;;AAEA;;;;;;;;;;AAUA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA,IAAI,QAAQ,CACX,QADW,EAEX,SAFW,EAGX,GAHW,CAAZ;;AAMA,QAAQ,GAAR,CAAY,KAAZ;;AAEA,MAAM,IAAN,CAAW,KAAX;AACA,MAAM,MAAM,MAAZ,IAAsB,MAAtB;;AAEA,QAAQ,GAAR,CAAY,KAAZ;;AAEA;;;;;AAKA;AACA;AACA;AACA,MAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,IAAnB;AACA,QAAQ,GAAR,CAAY,KAAZ","file":"index.js","sourcesContent":["/*let obj1 = {\r\n\tname: 'Сергей',\r\n\tlastName: 'Мелюков',\r\n\told: 180,\r\n\tvalueOf () {\r\n\t\treturn this.old;\r\n\t},\r\n\ttoString() {\r\n\t\treturn `[${this.name}] - [${this.lastName}]`;\r\n\t}\r\n};\r\n\r\nlet obj2 = {\r\n\tname: 'Сергей',\r\n\tlastName: 'Мелюков',\r\n\told: 180,\r\n\tvalueOf () {\r\n\t\treturn this.old;\r\n\t},\r\n\ttoString() {\r\n\t\treturn `[${this.name}] - [${this.lastName}]`;\r\n\t}\r\n};*/\r\n\r\n/*if (obj1 == obj2) { // не одинаковые, сравниваются адреса, где хранятся обьекты, но если есть метод valueOf, то можно сравнивать по значению, которое возвращает этот метод, кроме сравнения ==\r\n\tconsole.log('Обьекты одинаковые!');\r\n}*/\r\n\r\n/*console.log(obj1 == obj2);\r\nconsole.log(obj1 >= obj2);\r\nconsole.log(obj1 <= obj2);\r\nconsole.log(obj1 > obj2);\r\nconsole.log(obj1 < obj2);*/\r\n\r\n/*\r\nconsole.log(obj1.lastName);\r\nconsole.log(obj1['lastName']);\r\nconsole.log(obj1[1]); // нельзя - будет undefined*/\r\n\r\n/*let key = 'lastName';\r\nconsole.log(obj1[key]);\r\nconsole.log(obj1.key); // нельзя - будет undefined*/\r\n\r\n//obj1.lastName = '!!!!!!!!!'; // можно так obj1['lastName'] = '!!!!!!!'\r\n\r\n/*\r\ndelete obj1.lastName; // можно delete obj1['lastName']\r\nconsole.log(obj1);\r\n*/\r\n\r\n/*\r\nfor (let prop in obj1) {\r\n\t//console.log(prop);\r\n\tconsole.log(obj1[prop]);\r\n\tconsole.log(obj1.prop); // нельзя - будет undefined\r\n}*/\r\n\r\n// неправильно\r\n/*\r\nif(!obj1.old) {\r\n\tconsole.log('Свойства old НЕТ в обьекте');\r\n}*/\r\n/*\r\nif(obj1.hasOwnProperty('old')) {\r\n\tconsole.log('Свойство old ЕСТЬ в обьекте');\r\n} else {\r\n\tconsole.log('Свойства old НЕТ в обьекте');\r\n}*/\r\n\r\n//console.log(Object.keys(obj1)); // метод статический\r\n\r\n/*\r\nlet keys = Object.keys(obj1);\r\n\r\nfor (let i = 0; i < keys.length; i++) {\r\n\t//console.log(keys[i]);\r\n\t//console.log(obj1[keys[i]]);\r\n\tlet key = keys[i];\r\n\tconsole.log(obj1[key]);\r\n}*/\r\n\r\n//Object.keys(obj1).forEach(key => console.log(obj1[key]));\r\n\r\n/*\r\nlet obj1 = [\r\n\t{\r\n\t\tname: 'name',\r\n\t\twritable: true,\r\n\t\tvalue: 'Сергей'\r\n\t},\r\n\t{\r\n\t\tname: 'lastName',\r\n\t\twritable: true,\r\n\t\tvalue: 'Мелюков'\r\n\t},\r\n\t{\r\n\t\tname: 'old',\r\n\t\twritable: true,\r\n\t\tvalue: 180\r\n\t}\r\n];*/\r\n\r\n/*let obj1 = {\r\n\tname: 'Сергей',\r\n\tlastName: 'Мелюков',\r\n\told: 180\r\n};*/\r\n\r\n/*Object.defineProperty(obj1, 'fullName', { // Это дескриптор свойства fullName\r\n\t//value: '!!!!', // default undefined - нельзя использовать вместе с get\r\n\tenumerable: true, // default false\r\n\t//writable: true, // default false - нельзя использовать вместе с get\r\n\tconfigurable: true, // default false\r\n\tget () {\r\n\t\treturn `${this.name} ${this.lastName}`;\r\n\t},\r\n\tset (value) {\r\n\t\t//console.log('Новое значение:', value);\r\n\t\tlet name, lastName;\r\n\t\t[name, lastName] = value.split(' '); // Babel при преобразовании кода в браузере выдает ошибку\r\n\t\tthis.name = name;\r\n\t\tthis.lastName = lastName;\r\n\t}\r\n});\r\n\r\nconsole.log(obj1.fullName);\r\n\r\nconsole.log(obj1);\r\n\r\nobj1.fullName = 'Иван Иванов';\r\n\r\n//console.log(obj1.toString());\r\n\r\nfor (let prop in obj1) {\r\n\tconsole.log(obj1[prop]);\r\n}\r\n*/\r\n//console.log(obj1);\r\n\r\nlet array = [\r\n\t'Сергей',\r\n\t'Мелюков',\r\n\t180\r\n];\r\n\r\nconsole.log(array);\r\n\r\narray.push('!!!');\r\narray[array.length] = '!!!!';\r\n\r\nconsole.log(array);\r\n\r\n/*\r\ndelete array[3]; // неправильное удаление\r\n\r\nconsole.log(array);*/\r\n\r\n//array.splice(3, 2);\r\n//array.splice(3, 0, 1,2,3,4,5);\r\n//array.splice(-1, 0, 1,2,3,4);\r\narray.splice(3, 1, 1000);\r\nconsole.log(array);"]}